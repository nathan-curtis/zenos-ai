alias: Zen AdminTools KungFu Writer
mode: single
description: >-
  Zen AdminTools KungFu Writer v1.5.0 — creates or updates structured Kung Fu
  component drawers in the Zen Dojo Cabinet.  Each component defines how a
  subsystem behaves, what data it depends on, and which entity controls it.
  Think of this script as the pen the monks use to write new katas for Friday.
fields:
  drawer:
    name: Drawer
    description: Unique drawer name (snake_case) inside the target cabinet.
    example: water_manager
    required: false
    selector:
      text: null
  cabinet:
    name: Cabinet
    description: Target cabinet name; defaults to zen_kungfu_cabinet.
    example: zen_kungfu_cabinet
    required: false
    selector:
      text: null
  command:
    name: Library Command
    description: Library token or macro that calls this subsystem (e.g. ~WATER~).
    example: ~WATER~
    required: false
    selector:
      text: null
  component_instructions:
    name: Component Instructions
    description: >-
      Detailed operational notes.  Describe what sensors it reads, what failures
      look like, and what inferences Friday should draw.  Paragraphs and
      indented YAML-style lists are fine; aim for 10–40 lines of text.
    example: >-
      Use to view water flow statistics, detect leaks, and monitor salt levels.
      Define bridge/sensor connectivity and alert logic.
    required: false
    selector:
      text: null
  component_summary:
    name: Component Summary
    description: One-sentence abstract (≤140 chars) explaining the subsystem’s purpose.
    example: Manages household water flow and leak monitoring.
    required: false
    selector:
      text: null
  friendly_name:
    name: Friendly Name
    description: Human-readable title shown in dashboards.
    example: Water Manager
    required: false
    selector:
      text: null
  label:
    name: Label
    description: Primary Library/Index label for cross-reference.
    example: Water Manager
    required: false
    selector:
      text: null
  master_switch:
    name: Master Switch Entity
    description: The authoritative on/off control entity for the subsystem (input_boolean).
    example: input_boolean.water_manager_master_switch
    required: false
    selector:
      entity:
        filter:
          domain: input_boolean
  more_info:
    name: More Info
    description: >-
      Extended description or rationale: why this subsystem matters, safety
      implications, or contextual notes (1–3 paragraphs).
    example: Provides essential oversight for water usage and leak prevention.
    required: false
    selector:
      text: null
  priority:
    name: Priority Level
    description: Execution tier used by the Dojo (reflex, core, beta, experimental).
    example: reflex
    required: false
    selector:
      select:
        options:
          - reflex
          - core
          - beta
          - experimental
        mode: dropdown
  required_context:
    name: Required Context
    description: >-
      Enumerate dependencies—entities, sensors, integrations, or cabinets this
      component must see to function correctly.
    example: Requires Flume flow sensor and leak detectors.
    required: false
    selector:
      text: null
  version:
    name: Component Version
    description: Semantic version of the component definition.
    example: 2.0.0
    required: false
    selector:
      text: null
  confirm_action:
    name: Confirm Overwrite
    description: Toggle ON to allow write; prevents accidental replacement.
    example: true
    required: true
    default: false
    selector:
      boolean: null
  action:
    name: Action
    description: Choose write to commit or help to view instructions.
    default: help
    selector:
      select:
        options:
          - write
          - help
sequence:
  - variables:
      result: "{{ {} }}"
      drawer: "{{ drawer | default('') }}"
      cabinet: "{{ cabinet | default('zen_kungfu_cabinet') }}"
      command: "{{ command | default('') }}"
      component_instructions: "{{ component_instructions | default('') }}"
      component_summary: "{{ component_summary | default('') }}"
      friendly_name: "{{ friendly_name | default('') }}"
      master_switch: "{{ master_switch | default('') }}"
      more_info: "{{ more_info | default('') }}"
      priority: "{{ priority | default('') }}"
      required_context: "{{ required_context | default('') }}"
      version: "{{ version | default('') }}"
      confirm_action: "{{ confirm_action | default(false) }}"
      action: "{{ action | default('help') }}"
      timestamp: "{{ now().isoformat() }}"
      kungfu_version: 0.9.0
      schema: |-
        {{
          {
            "command": command,
            "component_instructions": component_instructions,
            "component_summary": component_summary,
            "friendly_name": friendly_name,
            "label": label,
            "master_switch": master_switch,
            "more_info": more_info,
            "priority": priority,
            "required_context": required_context,
            "version": version,
            "kungfu_version": kungfu_version
          }
        }}
      payload: |-
        {{
          {
            drawer: {
              "value": schema,
              "timestamp": timestamp
            }
          }
        }}
      help_text: >-
        🥋 **Zen AdminTools KungFu Writer v1.5.0 — The Dojo Scribe**

        --- **Purpose** Create or update a fully structured Kung Fu component
        drawer inside the Zen Dojo Cabinet.  Each drawer defines a complete
        subsystem of the smart home: how it works, what it depends on, and how
        Friday, Kronk, and the Monks should reason about it.  Think of a drawer
        as a lesson plan for a sensei teaching a new kata — clarity, precision,
        and insight matter.

        --- **What It Builds**
          • Writes a JSON object containing roughly 12 core keys
            (`command`, `component_instructions`, `friendly_name`, etc.)
          • Packages it under the selected `drawer` name within the `cabinet`,
            together with an ISO 8601 timestamp.
          • Calls FileCabinet to validate and index the new data, making it visible
            to the Library, Index, and Monastery summarizers for reasoning.

        --- **How Much to Write**
          • *Short fields* — `summary`, `friendly_name`, `label`: 1 concise line each.
          • *component_instructions* — rich prose of 10–40 lines.  Describe sensors,
            normal operation, failure states, inferences, and alert logic.  You may
            embed small YAML or list sections for clarity.
          • *more_info* — 1–3 paragraphs giving broader context, safety rationale, or
            design philosophy.
          • *required_context* — short list or sentence of dependencies (entities,
            integrations, or data sources).
          • Avoid excessive size (>4 KB); split long documentation into a Library
            module if needed and reference it.
          • End each major section with a plain English sentence — it helps the
            summarizers interpret intent.

        --- **Example: Component “foo_manager”**
          ```
          command: "~FOO~"
          component_instructions: >-
            Monitors Foo-level energy flow for the Foo Subsystem.
            Alerts when foo sensors report deviation from expected thresholds.
            Typical triggers:
              - binary_sensor.foo_sensor_connected: -off- indicates lost sensor link.
              - sensor.foo_level_high: value > 80 triggers overflow protection.
            Expected recovery:
              - Resume normal mode when foo_level < 60 for 5 consecutive minutes.
            Inferences:
              - When Foo flow rises during absence, infer possible leak condition.
              - Cross-reference RoomState to avoid false positives during laundry.
            Rules:
              - Do not report flow when any Foo connectivity sensor is offline.
          component_summary: >-
            Manages Foo subsystem behavior and safety monitoring.
          friendly_name: Foo Manager
          label: Foo Manager
          master_switch: input_boolean.foo_manager_master_switch
          more_info: >-
            Foo Manager coordinates the Foo sensors to safeguard the Foo subsystem
            against overflow and system imbalance.  It reports to the Energy and
            Water Managers for holistic monitoring.
          priority: reflex
          required_context: Requires foo flow sensors and occupancy context.
          version: 2.0.0
          ```
          When committed, this becomes a fully functional Dojo drawer
          (`zen_kungfu_cabinet.foo_manager`) that the Monastery can load,
          summarize, and reason upon.

        --- **Behavior**
          • `action: help` → Displays this guide and halts — safe to run anytime.
          • `action: write` + `confirm_action: true` → Creates or overwrites the
            specified drawer using `script.zen_dojotools_filecabinet`.
          • `action: write` + `confirm_action: false` → Aborts with a gentle warning.
          • Returns a structured JSON response suitable for DojoTools LogViewer and
            Monastery reflection.

        --- **Best Practices**
          • Write in clear, natural language; the monks summarize your words for
            Friday’s context window — not raw YAML.
          • Verify that entity IDs (especially `master_switch`) exist before commit.
          • Keep consistent version numbering and casing (semantic versioning).
          • Each drawer is both documentation *and* operational code — clarity equals
            reliability.
          • When describing alerts, always specify both normal and failure states.

        --- **Proverb of the Dojo** “When the scribe writes clearly, the system
        acts wisely.”
  - choose:
      - alias: Help
        conditions:
          - condition: template
            value_template: "{{ action == 'help' }}"
        sequence:
          - variables:
              result: "{{ { \"result\": \"help\", \"help_text\": help_text } }}"
      - alias: BlockUnconfirmed
        conditions:
          - condition: template
            value_template: |-
              {{
                action == 'write'
                and not confirm_action
                and (
                  drawer == '' or
                  command == '' or
                  component_instructions == '' or
                  component_summary == '' or
                  friendly_name == '' or
                  master_switch == '' or
                  more_info == '' or
                  priority == '' or
                  required_context == '' or
                  version == ''
                )
              }}
            alias: Missing Required Field
        sequence:
          - variables:
              result: |-
                {{
                  {
                    "result": "error",
                    "reason": "Missong one or more required fields",
                    "usage": "Retry with missing fields - all are required for writes. See help."
                  }
                }}
      - alias: BlockUnconfirmed
        conditions:
          - condition: template
            value_template: "{{ action == 'write' and not confirm_action }}"
        sequence:
          - variables:
              result: |-
                {{
                  {
                    "result": "error",
                    "reason": "Confirmation required before overwriting Dojo drawer.",
                    "usage": "Retry with confirm_action=true to commit changes."
                  }
                }}
      - alias: WriteConfirmed
        conditions:
          - condition: template
            value_template: "{{ action == 'write' and confirm_action }}"
        sequence:
          - data:
              action_type: create
              cabinet: "{{ cabinet }}"
              drawer: "{{ drawer }}"
              key: "{{ drawer }}"
              value: "{{ payload }}"
              force_action: true
              protect_write: false
              show_hidden_volumes: false
            response_variable: write_response
            action: script.zen_dojotools_filecabinet
          - variables:
              result: |-
                {{
                  {
                    "result": "success",
                    "result_type": "dojo_write",
                    "message": "Kung Fu component '" ~ drawer ~
                               "' written successfully to cabinet '" ~ cabinet ~ "'.",
                    "response": write_response | default(''),
                    "timestamp": timestamp
                  }
                }}
  - variables:
      final_result: "{{ result }}"
  - stop: true
    response_variable: final_result
