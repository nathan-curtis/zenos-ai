sequence:
  - variables:
      dojo_cabinet: "{{ label_entities('Zen Dojo Cabinet') | first | default('') }}"
      kata_cabinet: "{{ label_entities('Zen Kata Cabinet') | first | default('') }}"
      household_cabinet: >-
        {{ label_entities('Zen Default Household Cabinet') | first | default('')
        }}
      monk_response: {}
      filecabinet_response: {}
      component_slug: "{{ kung_fu_component_id | slugify | default('kung_fu') }}"
  - variables:
      dojo_drawer: |-
        {{
          (state_attr(dojo_cabinet, 'variables') or {}).get(component_slug, {})
        }}
      dojo_drawer_value: "{{dojo_drawer.value}}"
      household_drawer: |-
        {{
          (state_attr(household_cabinet, 'variables') or {}).get(component_slug, {})
        }}
      household_drawer_value: "{{household_drawer.value}}"
  - variables:
      version: >
        {{ ( dojo_drawer.version | default('') ) or ( dojo_drawer_value.version
        | default('') ) }}
  - variables:
      friendly_name: >
        {{ ( dojo_drawer.friendly_name | default('') ) or (
        dojo_drawer_value.friendly_name | default('') ) }}
  - variables:
      master_switch: >
        {{ ( dojo_drawer.master_switch | default('') ) or (
        dojo_drawer_value.master_switch | default('') ) }}
  - variables:
      index_command: >
        {{ ( dojo_drawer.label | default('') ) or ( dojo_drawer_value.label |
        default('') ) }}
  - variables:
      library_command: >
        {{ ( dojo_drawer.command | default('') ) or ( dojo_drawer_value.command
        | default('') ) }}
  - variables:
      component_summary: >
        {{ ( dojo_drawer.component_summary | default('') ) or (
        dojo_drawer_value.component_summary | default('') ) }}
  - variables:
      tool: >
        {{ ( dojo_drawer.tool | default('') ) or ( dojo_drawer_value.tool |
        default('') ) }}
  - if:
      - alias: If Label exists and not ""
        condition: template
        value_template: "{{ index_command !=\"\" }}"
    then:
      - action: script.dojotools_zen_index
        metadata: {}
        data:
          operator: AND
          expand_entities: true
          timeout: 2
          label_1: "{{ index_command }}"
        response_variable: zen_index_result
  - variables:
      index_result: |-
        {{
           {
             "command": index_command | default(''),
             "result": zen_index_result | default({})
           }
         }}
  - if:
      - condition: template
        value_template: "{{ library_command and ( library_command !=\"\" )}}"
    then:
      - variables:
          library_command_output: |-
            {%- import 'command_interpreter.jinja' as command_interpreter %}
            {{ command_interpreter.interpreter(library_command) | default('') }}
        alias: Call a Library ~COMMAND~
  - variables:
      library_command_result: |-
        {{
          {
            "command": library_command | default(''),
            "result": library_command_output | default('')
          }
        }}
  - variables:
      default_query: >
        Given attached context, complete the fields defined in the structure.
        Return ONLY a valid JSON object with exactly those fields, no extra
        text, no markdown. If no data is available, return whatever is valid for
        null or none for that element. Your output must strictly match the
        structure. When evaluating you do no thave to tell the user to monitor
        any Kung Fu internal operations function (such as s Kung Fu master
        switch) as those are monitored via external watchdog.  (Who watches the
        watchmen?) Your data below will likely include a full sumamry of the
        purpose of the component, a list of the tools available and effective
        readouts of thier output (command_result) and an index drop of the
        entities indexed under the components' registered Index label Use the
        data available to infer the status of the component, paying particular
        attention to what this component tells you is going on NOW, what are
        near term short term upcoming events. Note anomalies, interesting events
        and suggestied actions through the return fields provided. Essentially
        you're authoring "Cliff's Notes" for the component.  So at a minimum
        'What's important', 'hey look at this', "here's how and where you go to
        get deeper info if necessary..." Its ok to stretch a little - just
        adjust your confidence level in your response as you do if necessary.
        The frontline AI will have all of the 'Zen Kata' summaries
        super-summarized for attention by the 'High Priestess' very shortly.
        (Normal ETA within 15 min.) Each component is summarized on both a clock
        and on demand by events.  Our 'default' clock SHOULD return to each
        component within 15 minutes but cannot be guaranteed.  Use the schedule
        information in your response as necessary. If you are missing
        information to provide better summarization please use the error field
        to request it for future runs.
      query: "{{ query | default(default_query) }}"
      kata_template: |-
        {{
          ((state_attr('sensor.zen_kata_storage_cabinet', 'variables') or {})
            .get('kata_template', {})
            .get('structure', {}))
        }}
      review_data: |-
        {{
          {
            "kung_fu_component_id": component_slug | default(''),
            "library_data": {
              "dojo_cabinet": dojo_cabinet | default(''),
              "kata_cabinet": kata_cabinet | default(''),
              "drawer": dojo_drawer | default({}),
              "household_prefs": household_drawer | default({}),
              "index": index_result | default({}),
              "library_console": library_console | default({}),
            },
            "tool": tool | default('')
          }
        }}
      example_data: >
        {"subjective":null,"general_inference":"Kung Fu component v3.0.0 manages
        dojo and kata cabinet status, prioritizes production components, and
        updates the Kata Wall.","attention":"Monitor dojo and kata cabinet
        sensors and the Kung Fu master switch for status changes within the next
        hour.","objective":"Reports on/off state of dojo and kata cabinets via
        sensors, ensuring production components are prioritized over beta
        modules, and triggers Kata Wall updates on status
        changes.","events":[{"trigger":"is_everyone_kung_fu_fighting","timestamp":"2025-09-19T12:51:20+00:00"}],"watchlist":["sensor.zen_dojo_cabinet","sensor.zen_kata_storage_cabinet","input_boolean.kung_fu._master_switch"],"error":null,"post":true,"urgency":2,"confidence":0.9}   
      supplemental_instructions: "{{ supplemental_prompt | default('') }}"
      prompt: |-
        {{
          {
            "query": query | default({}),
            "structure": kata_template | default({}),
            "example_data": example_data | default({}),
            "review_data": review_data | default({}),
            "supplemental_instructions": supplemental_instructions | default({})
          } | to_json
        }}
  - alias: "Monk Runner: Perform ai_task"
    action: ai_task.generate_data
    data:
      task_name: "{{ kung_fu_component_id | title }} Monk"
      instructions: "{{ prompt }}"
      entity_id: ai_task.gpt_oss_20b_local_ai_task
    response_variable: monk_response
    enabled: true
  - variables:
      kata_summary: "{{ monk_response.data | default({}) }}"
  - if:
      - alias: If post set to true with valid data
        condition: template
        value_template: "{{ monk_response.data and ( post_to_kata_cabinet == true ) }}"
    then:
      - delay:
          hours: 0
          minutes: 0
          seconds: 0
          milliseconds: 250
      - action: script.zen_dojotools_filecabinet
        metadata: {}
        data:
          action_type: update
          set_timestamp: true
          show_hidden_volumes: false
          force_action: true
          volume_entity_id:
            - sensor.zen_kata_storage_cabinet
          key: "{{ component_slug }}"
          value: "{{ kata_summary }}"
          label_input: "{{ index_command, 'Ninja Summary' }}"
        response_variable: filecabinet_response
        enabled: true
  - variables:
      final_response: |-
        {{
          {
            "status": "success",
            "monk": monk_response | default ({}),
            "post": post_to_kata_cabinet | default(false),
            "dojo_drawer": dojo_drawer | default(''),
            "filecabinet_write": filecabinet_response | default ({})
          }
        }}
  - stop: Return Response to Caller
    response_variable: final_response
fields:
  kung_fu_component_id:
    selector:
      text: {}
    default: kung_fu
    description: >-
      Valid Kung Fu Component ID to be summarized to the Kata Cabinet  (will be
      slugified)
    name: Kung Fu Component ID
  query:
    selector:
      text: {}
    name: Override Query
    description: >-
      OVERRIDES default Query if provided (Overwrites any prepared instructions
      use with caution)
  post_to_kata_cabinet:
    selector:
      boolean: {}
    name: Post to Kata Cabinet
    description: >-
      Post to the kata cabinet after successful summarization? (Default false,
      disabled if custom query defined.)
  supplemental_prompt:
    selector:
      text: null
    name: Supplemental Prompt
    description: >-
      Any additional details and data to add to the prompt or query.  Will be
      inserted at the end as a supplement if provided.
alias: Zen DojoTools Ninja Summarizer
description: >-
  Ninja Summarizer (4.1.1) Now EVEN MORE Ninja goodness.

  Collects precise context as defined by a Kung Fu component in the Dojo (see
  system docs for details on schema) and submits it for review by a trusted LLM
  agent. (The beloved Monks of the Monastery)

  Results are written (if selected) into the Kata cabinet drawer of the same
  name, using the shared kata_template (schema not optional on kata write,
  disabled if custom prompt is provided) 

  Will queue up to 2 runs for completion.

  Snapshot a kung fu component and get the (near) INSTANT 411.  (inference_ETA
  ~15 seconds warm, ~60 cold)
icon: mdi:karate
mode: queued
max: 2
