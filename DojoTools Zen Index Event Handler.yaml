alias: DojoTools Zen Index Event Handler
{# NOTE THIS IS AN AUTOMATION - NOT A SCRIPT #}
description: >
  Event Listener (2.0.0) to recurse index calls.  REQUIRES DojoTOOLS Zen Index
  (2.0.0 or greater)
triggers:
  - event_type: zen_indexer_request
    trigger: event
actions:
  - variables:
      index_command: "{{ trigger.event.data.index_command | default('{}', true) }}"
      correlation_id: "{{ trigger.event.data.correlation_id }}"
      depth: "{{ trigger.event.data.depth if 'depth' in trigger.event.data else 1 }}"
      is_mapping: |-
        {% set cmd = index_command | trim %} {% if cmd.startswith('{') %}
          {{ (cmd | from_json) is mapping }}
        {% else %}
          false
        {% endif %}
      parsed_cmd: >
        {% set reserved = ['AND', 'OR', 'XOR', 'NOT'] %} {% set true_tokens =
        ['true', 't', 'y', 'yes', 'on', '1'] %} {% set false_tokens = ['false',
        'f', 'n', 'no', 'off', '0'] %} {% set raw = index_command | string |
        trim %} {% set is_json = raw.lstrip().startswith('{') %} {% if is_json
        %}
          {{ raw }}
        {% elif raw == "" or raw == "*" %}
          { "label_1": "*", "operator": "AND", "expand_entities": false }
        {% else %}
          {% set tokens = raw.split() %}
          {% set exp = false %}
          {% if tokens[-1] | lower in true_tokens %}
            {% set exp = true %}
            {% set tokens = tokens[:-1] %}
          {% elif tokens[-1] | lower in false_tokens %}
            {% set tokens = tokens[:-1] %}
          {% endif %}
          {% set op_index = namespace(idx = none) %}
          {% for i in range(tokens | length) %}
            {% if tokens[i] | upper in reserved %}
              {% set op_index.idx = i %}
              {% break %}
            {% endif %}
          {% endfor %}
          {% if op_index.idx is not none %}
            {% set label_1 = tokens[:op_index.idx] | join(" ") | trim("'\"") %}
            {% set op = tokens[op_index.idx] | upper %}
            {% set label_2 = tokens[op_index.idx+1:] | join(" ") | trim("'\"") %}
          {% else %}
            {% set label_1 = tokens | join(" ") | trim("'\"") %}
            {% set op = "AND" %}
            {% set label_2 = "" %}
          {% endif %}
          {
            "label_1": "{{ label_1 }}",
            "label_2": "{{ label_2 }}",
            "operator": "{{ op }}",
            "expand_entities": {{ exp }}
          }
        {% endif %}
      entities_1: >-
        {% set ents = parsed_cmd.entities_1 if parsed_cmd.entities_1 is defined
        and parsed_cmd.entities_1 else [] %} {% if ents is string %}
          {% set ents = ents | from_json | default([]) %}
        {% endif %} {% if ents | length == 0 and parsed_cmd.label_1 %}
          {{ label_entities(parsed_cmd.label_1) | default([]) }}
        {% else %}
          {{ ents }}
        {% endif %}
      label_1: "{{ parsed_cmd.label_1 if parsed_cmd.label_1 is defined else '' }}"
      entities_2: >-
        {% set ents = parsed_cmd.entities_2 if parsed_cmd.entities_2 is defined
        and parsed_cmd.entities_2 else [] %} {% if ents is string %}
          {% set ents = ents | from_json | default([]) %}
        {% endif %} {% if ents | length == 0 and parsed_cmd.label_1 %}
          {{ label_entities(parsed_cmd.label_1) | default([]) }}
        {% else %}
          {{ ents }}
        {% endif %}
      label_2: "{{ parsed_cmd.label_2 if parsed_cmd.label_2 is defined else '' }}"
      operator: |-
        {% if parsed_cmd.operator is defined and parsed_cmd.operator %}
          {{ parsed_cmd.operator }}
        {% else %}
          AND
        {% endif %}
      expand_entities: >-
        {{ parsed_cmd.expand_entities if parsed_cmd.expand_entities is defined
        else false }}
  - alias: Dispatch Zen Index Command
    data:
      entities_1: "{{ entities_1 }}"
      label_1: "{{ label_1 }}"
      entities_2: "{{ entities_2 }}"
      label_2: "{{ label_2 }}"
      operator: "{{ operator }}"
      expand_entities: "{{ expand_entities }}"
    response_variable: zen_index_response
    action: script.dojotools_zen_index
  - alias: Return Zen Indexer Result
    event: zen_index_response
    event_data:
      correlation_id: "{{ correlation_id }}"
      response: "{{ zen_index_response }}"
mode: queued
