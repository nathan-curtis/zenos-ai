alias: Zen DojoTools ToDo
description: >-
  Zen DojoTools ToDo 1.5.0 for Home Assistant 'todo.' domain.
    Full CRUD operations
    Per-list or label targeting
    Update by ID/summary
    Robust error handling
    self-documenting help.
  Use as your default todo handler, bugs and feature requests to 
  the ZenOS-AI github repo at 'nathan-curtis/zenos-ai'
sequence:
  - variables:
      action_type: "{{ action_type | default('read') }}"
      items: |-
        {%- if items is defined and items is iterable and items|length > 0 -%}
          {{ items }}
        {%- else -%}
          ['']
        {%- endif -%}
      due_date: "{{ due_date | default('') }}"
      description: "{{ description | default('') }}"
      list_name: "{{ list_name | default('') }}"
      status: "{{ status | default('needs_action') }}"
      todo_lists: "{{ states.todo | map(attribute='entity_id') | list }}"
      valid_todo_entities: "{{ states.todo | map(attribute='entity_id') | map('lower') | list }}"
      todo_list_entity: |-
        {%- if list_name[0:5] == 'todo.' -%}
          {{ list_name | lower | replace(' ', '_') }}
        {%- else -%}
          todo.{{ list_name | lower | replace(' ', '_') }}
        {%- endif -%}
      todo_list_entity_exists: "{{ todo_list_entity in valid_todo_entities }}"
      label_targets: |-
        {{
          (
            label_targets
            if label_targets is iterable and label_targets is not string
            else label_targets.splitlines() if '\n' in label_targets
            else label_targets.split(',')
          )
          | map('trim')
          | map('lower')
          | select('string')
          | list
        }}
      label_entities: |-
        {{
          label_targets
          | map('label_entities')
          | sum(start=[])
          | select('match', '^todo\\.')
          | unique
          | list
        }}
      target_lists: >-
        {{ label_entities if label_entities | length > 0 else [todo_list_entity]
        }}
      is_list_wildcard: "{{ list_name in ['', None, '*'] }}"
      is_items_wildcard: >-
        {{ items is not defined or items|length == 0 or (items|length == 1 and
        items[0] in ['', None, '*']) }}
      list_query: >-
        {{ is_list_wildcard or action_type not in
        ['create','read','update','delete'] }}
      todo_lists_data: |-
        {{
          states.todo
          | map(attribute='entity_id')
          | map('lower')
          | list
          | map('regex_replace','^','')
        }}
        [
        {%- for l in states.todo -%}
          {
            "entity_id": "{{ l.entity_id }}",
            "friendly_name": "{{ l.attributes.friendly_name }}",
            "labels": [
              {%- for lid in labels(l.entity_id) -%}
                "{{ label_name(lid) }}"{% if not loop.last %}, {% endif %}
              {%- endfor -%}
            ]
          }{% if not loop.last %}, {% endif %}
        {%- endfor -%}
        ] | tojson | fromjson
  - choose:
      - conditions:
          - condition: template
            value_template: |-
              {{ action_type in ['create','update','delete'] and
                 target_lists | length > 1 }}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "error",
                    "message": "Multiple to-do lists match the query. Please specify a single list for this action."
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
          - set_conversation_response: "{{ final_response }}"
        alias: multiple list match error
      - conditions:
          - condition: template
            value_template: >-
              {{ is_list_wildcard and (label_entities | length == 0) and
              action_type in ['read','help','list'] }}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "info",
                    "message": "All available todo lists with labels.",
                    "lists": todo_lists_data
                  } | tojson
                }}
          - stop: Return all lists on wildcard
            response_variable: final_response
          - set_conversation_response: "{{ final_response }}"
        alias: show all lists and labels on wildcard
      - conditions:
          - condition: template
            value_template: >-
              {{ action_type == 'help' or action_type not in
              ['create','read','update','delete'] }}
        sequence:
          - variables:
              help_data: |-
                {{
                  {
                    "status": "info",
                    "version": "1.5.0",
                    "message": "This is the Zen DojoTools ToDo Help function.",
                    "actions": {
                      "read": "Reads items from a to-do list. Needs 'list_name' (or 'label_targets').",
                      "create": "Creates item(s). Needs 'list_name' and 'items'. List must already exist.",
                      "update": "Updates a single item in a list. Needs 'list_name' and one item (plus fields to update).",
                      "delete": "Deletes item(s). Needs 'list_name' and at least one item.",
                      "help": "Returns this help response."
                    },
                    "fields": {
                      "list_name": "To-do list name (defaults to all if empty or '*').",
                      "label_targets": "List of labels/tags for targeting lists (read only).",
                      "items": "Tasks as strings or objects (item, due_date, description, id, rename, status). For update/delete, MUST include the exact summary or id. Example: [{\"item\":\"Title\"}], [\"Title\"].",
                      "due_date": "ISO 8601 date for due date.",
                      "description": "Description of the task.",
                      "rename": "New name for an item (update only).",
                      "status": "'needs_action' or 'completed'."
                    },
                    "notes": [
                      "If list_name, items, or label_targets is '*', '', or null, all lists are returned.",
                      "Label targeting via label_targets works for read ops and aggregates all matching entities.",
                      "Only one item can be updated at a time.",
                      "For update/delete, you MUST specify the item using exact summary or id; otherwise, action fails.",
                      "For create: list must exist in Home Assistant before adding items.",
                      "If item is omitted or ambiguous, you'll get a clear error.",
                      "Use read first to confirm summaries or ids before update/delete.",
                      "For mark complete, supply item and status: completed.",
                      "For help/examples, use the help action."
                    ]
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: help_data
            enabled: true
          - set_conversation_response: "{{ help_data }}"
        alias: return help
      - conditions:
          - condition: template
            value_template: >-
              {{ list_query or (action_type == 'create' and not
              todo_list_entity_exists ) or (action_type == 'delete' and not
              todo_list_entity_exists) }}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "error" if action_type == 'create' and not todo_list_entity_exists else "success",
                    "message": (
                      "List '" ~ list_name ~ "' does not exist. Please create or configure this list in Home Assistant before adding items."
                      if action_type == 'create' and not todo_list_entity_exists
                      else "Available to-do lists returned successfully."
                    ),
                    "lists": todo_lists_data
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{final_response}}"
        alias: list query error or wildcard return
      - conditions:
          - condition: template
            value_template: >-
              {{ action_type == 'read' and not is_list_wildcard and
              todo_list_entity_exists }}
        sequence:
          - data:
              status:
                - needs_action
            target:
              entity_id: "{{ todo_list_entity }}"
            response_variable: tasks
            action: todo.get_items
          - variables:
              final_response: >-
                {% set items = tasks[todo_list_entity]['items'] %} {% set
                liststring = namespace(value="") %} {% for task in items %}
                  {% set line = "- " ~ task.summary %}
                  {% if task.due is defined and task.due %}
                    {% set line = line ~ " (Due: " ~ (task.due | as_timestamp | timestamp_custom("%-d %B at %-I:%M %p", true)) ~ ")" %}
                  {% endif %}
                  {% set liststring.value = liststring.value ~ line ~ "\n" %}
                {% endfor %} {{
                  {
                    "status": "success",
                    "message": (
                      "The \"" ~ list_name ~ "\" list has no tasks."
                      if items | length == 0 else
                      "\"" ~ list_name ~ "\" has " ~ (items | length) ~ " task(s):\n" ~ liststring.value
                    ),
                    "items": items,
                    "list_name": list_name
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{final_response}}"
        alias: read (single list)
      - conditions:
          - condition: template
            value_template: >-
              {{ action_type == 'read' and label_targets|length > 0 and
              label_entities|length > 0 }}
        sequence:
          - variables:
              all_task_results: []
          - repeat:
              for_each: "{{ label_entities }}"
              sequence:
                - data:
                    status:
                      - needs_action
                  target:
                    entity_id: "{{ repeat.item }}"
                  response_variable: tasks
                  action: todo.get_items
                - variables:
                    items: "{{ tasks[repeat.item]['items'] }}"
                    one_result: |-
                      {{
                        {
                          "todo_entity": repeat.item,
                          "task_count": items | length,
                          "items": items
                        } | tojson | from_json
                      }}
                - variables:
                    all_task_results: "{{ all_task_results + [one_result] }}"
          - variables:
              final_response: |-
                {{
                  {
                    "status": "success",
                    "message": "Aggregated tasks from " ~ (label_entities | length) ~ " todo lists.",
                    "results": all_task_results
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{final_response}}"
        alias: read tasks by labels
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'create' and todo_list_entity_exists }}"
        sequence:
          - repeat:
              for_each: "{{ items }}"
              sequence:
                - variables:
                    create_service_data: >-
                      {% set base = {
                        'entity_id': todo_list_entity,
                        'item': repeat.item.get('item','') if repeat.item is mapping else repeat.item
                      } %} {% if repeat.item is mapping and
                      repeat.item.get('due_date') %}
                        {% set base = dict(base, due_date=repeat.item.due_date) %}
                      {% elif due_date %}
                        {% set base = dict(base, due_date=due_date) %}
                      {% endif %} {% if repeat.item is mapping and
                      repeat.item.get('description') %}
                        {% set base = dict(base, description=repeat.item.description) %}
                      {% elif description %}
                        {% set base = dict(base, description=description) %}
                      {% endif %} {{ base }}
                - data: "{{ create_service_data }}"
                  action: todo.add_item
          - variables:
              final_response: |-
                {% if items | length == 1 %}
                  {{ {
                    "status": "success",
                    "message": "Created item \"" ~ (items[0].get('item','') if items[0] is mapping else items[0]) ~ "\" in list \"" ~ list_name ~ "\".",
                    "items": items,
                    "list_name": list_name
                  } | tojson }}
                {% else %}
                  {{ {
                    "status": "success",
                    "message": "Created " ~ (items | length) ~ " items in list \"" ~ list_name ~ "\".",
                    "items": items,
                    "list_name": list_name
                  } | tojson }}
                {% endif %}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{final_response}}"
        alias: create (list exists)
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'update' and todo_list_entity_exists }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ items | length > 1 }}"
                sequence:
                  - variables:
                      final_response: |-
                        {{ {
                          "status": "error",
                          "message": "Error: Multiple items cannot be updated at once. Please update one at a time.",
                          "list_name": list_name
                        } | tojson }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                    enabled: true
                  - set_conversation_response: "{{final_response}}"
            default:
              - variables:
                  update_data: |-
                    {% set ns = namespace(obj={}) %}
                    {% set itm = items[0] if items|length > 0 else {} %}
                    {% if itm is mapping %}
                      {% set ns.obj = dict(ns.obj, item=itm.get('item',''), list_id=list_name) %}
                      {% if itm.get('id') %}{% set ns.obj = dict(ns.obj, id=itm.id) %}{% endif %}
                      {% if itm.get('due_date') %}{% set ns.obj = dict(ns.obj, due_date=itm.due_date) %}
                      {% elif due_date %}{% set ns.obj = dict(ns.obj, due_date=due_date) %}{% endif %}
                      {% if itm.get('rename') %}{% set ns.obj = dict(ns.obj, rename=itm.rename) %}
                      {% elif rename %}{% set ns.obj = dict(ns.obj, rename=rename) %}{% endif %}
                      {% if itm.get('description') %}{% set ns.obj = dict(ns.obj, description=itm.description) %}
                      {% elif description %}{% set ns.obj = dict(ns.obj, description=description) %}{% endif %}
                      {% if itm.get('status') %}{% set ns.obj = dict(ns.obj, status=itm.status) %}
                      {% elif status %}{% set ns.obj = dict(ns.obj, status=status) %}{% endif %}
                    {% else %}
                      {% set ns.obj = dict(ns.obj, item=itm, list_id=list_name) %}
                      {% if due_date %}{% set ns.obj = dict(ns.obj, due_date=due_date) %}{% endif %}
                      {% if rename %}{% set ns.obj = dict(ns.obj, rename=rename) %}{% endif %}
                      {% if description %}{% set ns.obj = dict(ns.obj, description=description) %}{% endif %}
                      {% if status %}{% set ns.obj = dict(ns.obj, status=status) %}{% endif %}
                    {% endif %}
                    {{ ns.obj if ns.obj is mapping else dict() }}
              - choose:
                  - conditions:
                      - condition: template
                        value_template: >-
                          {{ update_data is mapping and update_data.item is
                          defined and update_data.item }}
                    sequence:
                      - variables:
                          update_service_data: >-
                            {% set d = {
                              'entity_id': todo_list_entity,
                              'item': update_data.get('item','')
                            } %} {% if update_data.get('id') %}{% set d =
                            dict(d, id=update_data.id) %}{% endif %} {% if
                            update_data.get('due_date') %}{% set d = dict(d,
                            due_date=update_data.due_date) %}{% endif %} {% if
                            update_data.get('rename') %}{% set d = dict(d,
                            rename=update_data.rename) %}{% endif %} {% if
                            update_data.get('description') %}{% set d = dict(d,
                            description=update_data.description) %}{% endif %}
                            {% if update_data.get('status') %}{% set d = dict(d,
                            status=update_data.status) %}{% endif %} {{ d }}
                      - data: "{{ update_service_data }}"
                        action: todo.update_item
                      - variables:
                          final_response: |-
                            {{
                              {
                                "status": "success",
                                "message": "Updated item \"" ~ update_data.get('item','') ~ "\" in list \"" ~ list_name ~ "\".",
                                "item": update_data,
                                "list_name": list_name
                              } | tojson
                            }}
                      - stop: Pass response variables back to LLM
                        response_variable: final_response
                        enabled: true
                      - set_conversation_response: "{{final_response}}"
                    alias: valid update
                  - conditions:
                      - condition: template
                        value_template: >-
                          {{ not (update_data is mapping and update_data.item is
                          defined and update_data.item) }}
                    sequence:
                      - variables:
                          final_response: |-
                            {{
                              {
                                "status": "error",
                                "message": "Update failed: No item was specified. Please provide the item summary or ID to update a task. Use a read to confirm exact summary.",
                                "received": update_data,
                                "list_name": list_name
                              } | tojson
                            }}
                      - stop: Pass response variables back to LLM
                        response_variable: final_response
                        enabled: true
                      - set_conversation_response: "{{final_response}}"
                    alias: invalid update data
        alias: update (list exists)
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'delete' and todo_list_entity_exists }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ items is not defined or items|length == 0 or
                      (items|length == 1 and items[0] in ['', None, '*']) }}
                sequence:
                  - variables:
                      final_response: |-
                        {{
                          {
                            "status": "error",
                            "message": "No valid item specified for deletion. Please specify at least one item.",
                            "items": items,
                            "list_name": list_name
                          } | tojson
                        }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                    enabled: true
                  - set_conversation_response: "{{final_response}}"
            default:
              - repeat:
                  for_each: "{{ items }}"
                  sequence:
                    - variables:
                        delete_service_data: >-
                          {% set base = {
                            'entity_id': todo_list_entity,
                            'item': repeat.item.get('item','') if repeat.item is mapping else repeat.item
                          } %} {% if repeat.item is mapping and
                          repeat.item.get('id') %}
                            {% set base = dict(base, id=repeat.item.id) %}
                          {% endif %} {{ base }}
                    - data: "{{ delete_service_data }}"
                      action: todo.remove_item
              - variables:
                  final_response: |-
                    {{
                      {
                        "status": "success",
                        "message": (
                          "Deleted item \"" ~ (items[0].get('item','') if items[0] is mapping else items[0]) ~ "\" from list \"" ~ list_name ~ "\"."
                          if items | length == 1 else
                          "Deleted " ~ (items | length) ~ " items from list \"" ~ list_name ~ "\"."
                        ),
                        "items": items,
                        "list_name": list_name
                      } | tojson
                    }}
              - stop: Pass response variables back to LLM
                response_variable: final_response
                enabled: true
              - set_conversation_response: "{{final_response}}"
        alias: delete (list exists)
  - stop: Pass context
    response_variable: final_response
  - set_conversation_response: "{{final_response}}"
    enabled: true
fields:
  action_type:
    description: "'create', 'read', 'update', 'delete', 'help' (Default: read)"
    required: true
    selector:
      select:
        options:
          - create
          - read
          - update
          - delete
          - help
    default: read
  list_name:
    description: >-
      To-do list name (default ''). '', null, or '*' returns all lists with
      labels.
    required: false
    selector:
      text: null
  items:
    description: >-
      List of tasks as strings or objects (`item`, `due_date`, `description`,
      `id`, `rename`, `status`). For `update`/`delete`, you MUST provide the
      exact summary (text) or `id` of the item to act on. Example: `[{"item":
      "Title", "description": "Details"}, ...]` or `["Title"]`. If omitted or
      ambiguous, action fails with a clear error. For update: only 1 item per
      call, supply new `description`, `due_date`, `status`, or `rename`. For
      mark completed: pass item and `status: completed`. Always use a `read`
      first to confirm summaries or `id`s. For create: list must exist. For
      help/examples, use the `help` action.
    required: false
    selector:
      text:
        multiple: true
        multiline: false
  rename:
    description: Updated text to rename the task item to (required for update rename ops).
    required: false
    selector:
      text:
        multiple: false
        multiline: false
  due_date:
    description: Optional global due date (ISO 8601).
    required: false
    selector:
      text: null
  description:
    description: Optional global description.
    required: false
    selector:
      text:
        multiline: true
  status:
    selector:
      select:
        options:
          - needs_action
          - completed
    name: status
    description: >-
      'needs_action' or 'completed' (default 'needs_action'). Use when filtering
      or updating status.
  label_targets:
    selector:
      text:
        multiple: true
    name: label_targets
    description: >-
      ONLY for read ops. Overrides other targeting and aggregates all entities
      for the listed labels/tags.
icon: mdi:clipboard-list
