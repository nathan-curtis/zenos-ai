alias: Zen Dojotools Calendar
description: >-
  Zen Dojotools Calendar (1.9.5) for Home Assistant. Provides create and read
  support for all calendars. Update, and delete are available for calendars that
  return event_ids (see help for locating event_id on supported calendars) for
  any calendar entity. Includes a structured Help function. Use '*' or '' as
  calendar_name to list all calendars. 'start' and 'end' default to today
  (midnight to midnight next day) if not set. Requires action_type and
  calendar_name for most actions. Updates and deletes operate by event_id match
  ONLY. If you cannot determine event_id, offer alternate suggestions you can
  perform with available toolset. See help for tips on locating event_id
  Supports targeting calendar entities by label.
sequence:
  - variables:
      action_type: "{{ action_type | default('read') }}"
      calendar_name: "{{ calendar_name | default('') }}"
      calendar_query: |-
        {{ (calendar_name in ['', None, '*'] and (label_targets | length == 0))
           or action_type == 'list' }}
      calendar_entity: |-
        {% if calendar_name[0:9] == 'calendar.' %}
          {{ calendar_name | lower | replace(' ', '_') }}
        {% else %}
          calendar.{{ calendar_name | lower | replace(' ', '_') }}
        {% endif %}
      valid_calendar_entities: "{{ states.calendar | map(attribute='entity_id') | map('lower') | list }}"
      calendar_entity_exists: "{{ calendar_entity in valid_calendar_entities }}"
      start: >-
        {% set raw = start if start is defined else now().replace(hour=0,
        minute=0, second=0) %} {% if raw is string %}
          {# Try full ISO first, fallback to date-only #}
          {% set dt = as_datetime(raw) if 'T' in raw else strptime(raw, "%Y-%m-%d") %}
        {% else %}
          {% set dt = raw %}
        {% endif %} {{ dt | as_local | as_timestamp |
        timestamp_custom("%Y-%m-%dT%H:%M:%S%:z", false) }}
      end: >-
        {% set raw = end if end is defined else (now().replace(hour=0, minute=0,
        second=0) + timedelta(days=1)) %} {% if raw is string %}
          {# Try full ISO first, fallback to date-only #}
          {% set dt = as_datetime(raw) if 'T' in raw else strptime(raw, "%Y-%m-%d") %}
        {% else %}
          {% set dt = raw %}
        {% endif %} {{ dt | as_local | as_timestamp |
        timestamp_custom("%Y-%m-%dT%H:%M:%S%:z", false) }}
      event_id: "{{ event_id | default('') }}"
      label_targets: |-
        {{
          (
            label_targets|default('')
            if label_targets is iterable and label_targets is not string
            else (label_targets|default('')).splitlines() if '\n' in (label_targets|default(''))
            else (label_targets|default('')).split(',')
          )
          | map('trim')
          | map('lower')
          | select('string')
          | list
        }}
      label_target_entities: |-
        {{
          label_targets
          | map('label_entities')
          | sum(start=[])
          | select('match', '^calendar\\.')
          | unique
          | list
        }}
      target_calendars: |-
        {% if label_target_entities %}
          {{ label_target_entities }}
        {% elif calendar_entity_exists %}
          [ "{{ calendar_entity }}" ]
        {% else %}
          []
        {% endif %}
      target_is_multi: "{{ (label_target_entities | count > 0) }}"
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ action_type in ['create','update','delete'] and
              target_is_multi}}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "error",
                    "message": "Multiple calendars match the query. Please specify a single calendar for this action."
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
          - set_conversation_response: "{{ final_response }}"
        alias: multiple targets error
      - conditions:
          - condition: template
            value_template: >-
              {{ action_type == 'read' and label_targets | length > 0 and
              target_calendars | length == 0 }}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "error",
                    "message": "No calendars found for labels: " ~ (label_targets | join(', ')) ~ "."
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
          - set_conversation_response: "{{ final_response }}"
        alias: no calendar for label error
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'help' }}"
        sequence:
          - variables:
              help_data: |-
                {{
                  {
                    "status": "info",
                    "message": "This is the Zen Dojotools Calendar Help function.",
                    "actions": {
                      "read": "Reads events from a given calendar. Requires 'calendar_name'. Optional: 'start', 'end'.",
                      "inspect": "Advanced read of a calendar entity using the system inspect tool event_id finder. If a calendar supports it, they're here. If not - sorry.",
                      "create": "Creates a new event. Requires 'calendar_name' and 'summary'. Optional: 'description', 'start', 'end'.",
                      "delete": "Deletes an event on supported calendars by event_id. Requires 'calendar_name', 'event_id' NO EXCEPTIONS. See notes for locating event_id",
                      "help": "Returns this help response.",
                      "update": "Updates an event on supported calendars by event_id. Requires 'calendar_name', 'event_id' NO EXCEPTIONS and relevant changes."
                    },
                    "defaults": {
                      "start": "Defaults to today at 00:00 local time if not supplied.",
                      "end": "Defaults to tomorrow at 00:00 local time if not supplied (i.e., end of today)."
                    },
                    "examples": {
                      "all_day": {
                        "start": "2025-09-27",
                        "end": "2025-09-28"
                      },
                      "timed": {
                        "start": "2025-09-27T14:00:00",
                        "end": "2025-09-27T15:00:00"
                      },
                      "timed_with_offset": {
                        "start": "2025-09-27T14:00:00-05:00",
                        "end": "2025-09-27T15:00:00-05:00"
                      }
                    },
                    "notes": [
                      "Use '*' or blank for 'calendar_name' to list all calendars.",
                      "Deletes and updates operate by event_id match ONLY - no soft matches do NOT work."
                      "If your read does NOT return a valid event_id, please use inspect read the calendar entity_id directly to locate event_ids. If update / delete is supported, so, you will find your event listed.",
                      "If multiple events match, update/delete is blocked.",
                      "If no event matches delete, it returns a warning and effective success.",
                      "To reschedule an event, modify start/end times, not title.",
                      "Label targeting via label_targets works for read ops and aggregates all matching entities."
                    ]
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: help_data
            enabled: true
          - set_conversation_response: "{{ help_data }}"
        alias: Return help
      - conditions:
          - condition: template
            value_template: >-
              {{ not calendar_entity_exists and calendar_name not in ['', None,
              '*'] }}
        sequence:
          - variables:
              final_response: |-
                {{
                  {
                    "status": "error",
                    "message": "No valid calendar entity_id found for '{{ calendar_name }}'. Please provide a valid entity_id or use '*' to list all calendars."
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
          - set_conversation_response: "{{ final_response }}"
        alias: invalid entity_id error
      - conditions:
          - condition: template
            value_template: >-
              {{ calendar_query or (action_type in ['read', 'create', 'update']
              and not calendar_entity_exists and (label_targets | length == 0))
              }}
        sequence:
          - variables:
              cal_list: |-
                [
                  {%- for cal in states.calendar -%}
                    {
                      "entity_id": "{{ cal.entity_id }}",
                      "friendly_name": "{{ cal.attributes.friendly_name | default('') }}",
                      "state": "{{ cal.state }}",
                      "labels": [{% for lid in labels(cal.entity_id) %}"{{ label_name(lid) }}"{% if not loop.last %}, {% endif %}{% endfor %}],
                      "start_time": "{{ cal.attributes.start_time | default('') }}",
                      "end_time": "{{ cal.attributes.end_time | default('') }}",
                      "location": "{{ cal.attributes.location | default('') }}",
                      "description": "{{ cal.attributes.description | default('') }}"
                    }{% if not loop.last %}, {% endif %}
                  {%- endfor -%}
                ]
              final_response: |-
                {{
                  {
                    "status": "success",
                    "message": "Listed all available calendars.",
                    "calendars": cal_list
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{ final_response }}"
        alias: return available calendars
      - conditions:
          - condition: template
            value_template: "{{ action_type == 'read' and target_calendars | length > 0 }}"
        sequence:
          - variables:
              all_event_results: []
          - repeat:
              for_each: "{{ target_calendars }}"
              sequence:
                - data:
                    start_date_time: "{{ start }}"
                    end_date_time: "{{ end }}"
                  response_variable: read_events
                  action: calendar.get_events
                  target:
                    entity_id: "{{ repeat.item }}"
                - variables:
                    events: >-
                      {{ read_events[repeat.item]['events'] if
                      read_events[repeat.item] is defined else [] }}
                    event_list: |-
                      [
                        {%- for event in events -%}
                          {
                            "summary": "{{ event.summary }}",
                            "start": "{{ event.start }}",
                            "end": "{{ event.end }}",
                            "event_id": "{{ event.event_id | default('') }}",
                            "description": "{{ event.description | default('') }}",
                            "location": "{{ event.location | default('') }}",
                            "all_day": "{{ event.all_day | default(false) }}",
                            "created": "{{ event.created | default('') }}",
                            "updated": "{{ event.updated | default('') }}"
                          }{% if not loop.last %}, {% endif %}
                        {%- endfor -%}
                      ]
                    one_result: |-
                      {
                        "calendar_entity": "{{ repeat.item }}",
                        "event_count": {{ events | length }},
                        "events": {{ event_list }}
                      }
                - variables:
                    all_event_results: "{{ all_event_results + [one_result] }}"
          - variables:
              final_response: |
                {{
                  {
                    "status": "success",
                    "message": "Aggregated events from " ~ (target_calendars | length) ~ " calendars.",
                    "results": all_event_results, 
                    "note": "use 'inspect' function to return available event_id(s)" 
                  }
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{ final_response }}"
        alias: read events from calendar
      - conditions:
          - alias: inspect calendar
            condition: template
            value_template: |+
              {{ action_type == 'inspect'
                 and not target_is_multi
                 and (calendar_entity_exists or label_target_entities | length == 1) }}

        sequence:
          - variables:
              calendar_entity_list: >-
                {%- set ce = calendar_entity | default(none) -%} {%- if ce is
                iterable and not ce is string -%}
                  {{ ce | list }}
                {%- elif ce is string and ce | length > 0 -%}
                  [{{ ce | tojson }}]
                {%- else -%}
                  []
                {%- endif -%}
          - action: script.dojotools_zen_inspect
            data:
              entity_id: "{{calendar_entity_list}}"
              timeout: 30
            response_variable: inspect_response
          - variables:
              final_response: "{{ inspect_response }}"
          - stop: Pass response variables back to LLM
            response_variable: final_response
          - set_conversation_response: "{{final_response}}"
      - conditions:
          - condition: template
            value_template: |2
               {{ action_type == 'create'
                         and not target_is_multi
                         and (calendar_entity_exists or label_target_entities | length == 1) }}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ start < end }}"
                    alias: OK Date Range Passes
                sequence:
                  - variables:
                      create_data: >-
                        {% set is_all_day = not 'T' in start and not 'T' in end
                        %} {% set d = { 'entity_id': (calendar_entity if
                        calendar_entity_exists else  label_target_entities[0]),
                        'summary': summary | default("Untitled Event") } %} {%
                        if is_all_day %}
                          {% set d = dict(d, start_date=start.split('T')[0], end_date=end.split('T')[0]) %}
                        {% else %}
                          {% set d = dict(d, start_date_time=start, end_date_time=end) %}
                        {% endif %} {% if description %}{% set d = dict(d,
                        description=description) %}{% endif %} {% if location
                        %}{% set d = dict(d, location=location) %}{% endif %} {%
                        if attendees %}
                          {% set attendee_list = attendees.split(',') | map('trim') | list %}
                          {% set d = dict(d, attendees=attendee_list) %}
                        {% endif %} {{ d }}
                  - data: "{{ create_data }}"
                    action: calendar.create_event
                  - variables:
                      final_response: |-
                        {{
                          {
                            "status": "success",
                            "message": "Created calendar event \\\"" ~ create_data.summary ~ "\\\" on calendar \\\"" ~ (
                              (label_target_entities[0] if (label_target_entities is defined and label_target_entities | length > 0) else calendar_entity)
                            ) ~ "\\\".",
                            "event": create_data
                          } | tojson
                        }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                    enabled: true
                  - set_conversation_response: "{{ final_response }}"
              - conditions:
                  - condition: template
                    value_template: "{{ start >= end }}"
                    alias: "Error: Invalid date, End before Start"
                sequence:
                  - variables:
                      final_response: |-
                        {{
                          {
                            "status": "error",
                            "message": "Invalid date range: start must be before end. Got start='" ~ start ~ "', end='" ~ end ~ "'."
                          } | tojson
                        }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                    enabled: true
                  - set_conversation_response: "{{ final_response }}"
        alias: create calendar event
      - conditions:
          - condition: template
            value_template: |2
               {{ action_type == 'update' and not target_is_multi and (calendar_entity_exists or label_target_entities | length == 1) }}
        sequence:
          - variables:
              delete_data: |
                {{
                  {
                    'entity_id': (calendar_entity if calendar_entity_exists else label_target_entities[0]),
                    'summary': summary,
                    'event_id': event_id,
                    'start_date_time': start,
                    'end_date_time': end
                  }
                }}
          - data: "{{ delete_data }}"
            action: calendar.delete_event
            enabled: false
          - action: ms365_calendar.remove_calendar_event
            data: "{{ delete_data }}"
            enabled: false
          - action: script.zen_dojotools_calendar
            metadata: {}
            data:
              action_type: delete
              event_id: "{{ event_id }}"
              calendar_name: "{{ entity_id }}"
            response_variable: zen_delete_response
          - variables:
              zen_delete_response: "{{ zen_delete_response | default({}) }}"
          - choose:
              - conditions:
                  - alias: Error
                    condition: template
                    value_template: "{{ delete_result.status == 'error' }}"
                sequence:
                  - variables:
                      status: error
                      tool_msg: zen_delete_response
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
              - conditions:
                  - alias: "Warning: Not Found"
                    condition: template
                    value_template: "{{ zen_delete_response.status == 'not_found' }}"
                sequence:
                  - variables:
                      status: warning
                      warn_msg: >-
                        No existing event matched. Nothing deleted. Created new
                        event instead.
              - conditions:
                  - alias: OK Deleted
                    condition: template
                    value_template: "{{ zen_delete_response.status == 'success' }}"
                sequence:
                  - variables:
                      status: success
                      tool_response: zen_delete_response
            default:
              - variables:
                  status: unknown
                  tool_msg: zen_delete_response
              - stop: Pass response variables back to LLM
                response_variable: final_response
          - variables:
              create_data: >-
                {% set is_all_day = not 'T' in start and not 'T' in end %} {%
                set d = { 'entity_id': (calendar_entity if
                calendar_entity_exists else label_target_entities[0]),
                'summary': summary | default("Untitled Event") } %} {% if
                is_all_day %}
                  {% set d = dict(d, start_date=start.split('T')[0], end_date=end.split('T')[0]) %}
                {% else %}
                  {% set d = dict(d, start_date_time=start, end_date_time=end) %}
                {% endif %} {% if description %}{% set d = dict(d,
                description=description) %}{% endif %} {% if location %}{% set d
                = dict(d, location=location) %}{% endif %} {% if attendees %}
                  {% set attendee_list = attendees.split(',') | map('trim') | list %}
                  {% set d = dict(d, attendees=attendee_list) %}
                {% endif %} {{ d }}
          - data: "{{ create_data }}"
            action: calendar.create_event
          - variables:
              final_response: |-
                {{
                  {
                    "status": "success",
                    "message": "Updated event via delete+create on calendar \\\"" ~ (
                      (label_target_entities[0] if (label_target_entities is defined and label_target_entities | length > 0) else calendar_entity)
                    ) ~ "\\\". " ~ warn_msg,
                    "event": create_data
                  } | tojson
                }}
          - stop: Pass response variables back to LLM
            response_variable: final_response
            enabled: true
          - set_conversation_response: "{{ final_response }}"
        alias: update calendar event
      - conditions:
          - condition: template
            value_template: |+
              {{ action_type == 'delete'
                 and not target_is_multi
                 and (calendar_entity_exists or label_target_entities | length == 1) }}


        sequence:
          - choose:
              - conditions:
                  - alias: "Error: Missing Required Field"
                    condition: template
                    value_template: >
                      {{ event_id is not defined or not event_id or event_id
                      =="" }}
                sequence:
                  - variables:
                      calendar_entity_list: >-
                        {%- set ce = calendar_entity | default(none) -%} {%- if
                        ce is iterable and not ce is string -%}
                          {{ ce | list }}
                        {%- elif ce is string and ce | length > 0 -%}
                          [{{ ce | tojson }}]
                        {%- else -%}
                          []
                        {%- endif -%}
                  - action: script.dojotools_zen_inspect
                    metadata: {}
                    data:
                      entity_id: "{{calendar_entity_list}}"
                    response_variable: inspect_response
                  - variables:
                      final_response: |-
                        {{
                          {
                            "status": "error",
                            "message": "Delete (including delete as part of update) requires 'event_id'",
                            "inspect": inspect_response | default({})
                          }
                        }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                  - set_conversation_response: "{{final_response}}"
              - conditions: []
                sequence:
                  - variables:
                      delete_data: |-
                        {{
                          {
                            "event_id": event_id
                          }
                        }}
                    enabled: false
                  - data: "{{ delete_data }}"
                    action: calendar.delete_event
                    enabled: false
                  - action: ms365_calendar.remove_calendar_event
                    data:
                      event_id: "{{event_id}}"
                    target:
                      entity_id: >-
                        {{(calendar_entity if calendar_entity_exists else
                        label_target_entities[0])}}
                  - variables:
                      final_response: |-
                        {{
                          {
                            "status": "delete triggered",
                            "message": "Deleted calendar event '" ~ event_id ~ "'. If no event was found, this was a no-op.",
                            "entity_id": entity_id | default (''), 
                            "event_id": event_id
                          } | tojson
                        }}
                  - stop: Pass response variables back to LLM
                    response_variable: final_response
                  - set_conversation_response: "{{ final_response }}"
                alias: OK to delete
        alias: delete event from calendar
fields:
  action_type:
    selector:
      select:
        options:
          - create
          - read
          - inspect
          - update
          - delete
          - help
    default: help
    description: >-
      Create, Read, Inspect (entity_id Required), Update (event_id Required),
      Delete (event_id Required)
  calendar_name:
    description: Calendar name or entity_id. Use '*' or '' to list calendars.
    required: false
    selector:
      text: null
  summary:
    description: Event summary title for create/update action
    required: false
    selector:
      text:
        multiline: false
  description:
    description: Optional description text for the calendar event.
    required: false
    selector:
      text:
        multiline: true
  start:
    description: >-
      Start time in ISO 8601 (e.g., 2025-06-01T09:00:00). Defaults to today.
      Example: '2025-09-27T14:00:00' or '2025-09-27' for all-day. '' if not
      provided.
    required: false
    selector:
      text: null
  end:
    description: >-
      End time in ISO 8601 (e.g., 2025-06-01T09:00:00). Defaults to tomorrow.
      Example: '2025-09-27T14:00:00' or '2025-09-27' for all-day. '' if not
      provided.
    required: false
    selector:
      text: null
  location:
    description: Optional location of the calendar event. Prefer human-readable geocoding.
    required: false
    selector:
      text: null
  attendees:
    description: Optional list of attendees (comma-separated emails or names).
    required: false
    selector:
      text:
        multiline: true
  label_targets:
    selector:
      text:
        multiple: true
        multiline: true
    name: label_targets
    description: >-
      ONLY used for read ops. When provided, overrides any other targeting
      mechanism and aggregates all entities for the listed labels/tags into a
      single result set.
  event_id:
    selector:
      text: null
    description: >-
      Event ID of the calendar event. REQUIRED for update / delete on supported
      calendars) See READ for event_id (available on supported calendars only).
    name: event_id
icon: mdi:calendar
mode: parallel
max: 10
